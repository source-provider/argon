#include <iostream>
#include <Windows.h>
#include <string>
#include <thread>
#include <vector>
#include <queue>
#include <map>

#include "Execution.hpp"
#include "XoR.h"

void HideConsole()
{
	::ShowWindow(::GetConsoleWindow(), SW_HIDE);
}

void ShowConsole()
{
	::ShowWindow(::GetConsoleWindow(), SW_SHOW);
}

bool IsConsoleVisible()
{
	return ::IsWindowVisible(::GetConsoleWindow()) != FALSE;
}

void ConsoleStart() {
	DWORD oldProt;
	VirtualProtect(reinterpret_cast<LPVOID>(FreeConsole), 1, PAGE_EXECUTE_READWRITE, &oldProt);
	*reinterpret_cast<BYTE*>(FreeConsole) = 0xC3;
	VirtualProtect(reinterpret_cast<LPVOID>(FreeConsole), 1, oldProt, &oldProt);
	AllocConsole();
	SetConsoleTitleA("Argon Microsoft Store Module [Developer]");
	FILE* v;
	freopen_s(&v, "CONIN$", "r", stdin);
	freopen_s(&v, "CONOUT$", "w", stdout);
	freopen_s(&v, "CONOUT$", "w", stderr);
	if (v != nullptr) {
		fclose(v);
	}
}

void main()
{
	//ConsoleStart();
	//printf(xorstr("[Argon -> Debug -> Scans] Beginning Scans.\n"));
	Execution::initialize();
	//printf(xorstr("[Argon -> Debug -> Initialize] Initialized Execution.\n"));
	Execution::hook_scripts_job();
	//printf(xorstr("[Argon -> Debug -> Hook] Hooked Jobs.\n"));
	std::thread(Execution::pipe).detach();
	//printf(xorstr("[Argon] Loaded!\n"));

	OutputDebugStringA("LOADED!");
}


int __stdcall DllMain(void* Module, DWORD Reason, void* Reserve)
{
	if (Reason == 1)
	{
		std::thread(main).detach();
	}
	return true;
}