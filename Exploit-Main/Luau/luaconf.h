#pragma once

#include <iostream>
#include <Windows.h>
#include <string>
#include <thread>
#include <vector>

#if defined(_MSC_VER) && !defined(__clang__)
#define LUAU_FASTMATH_BEGIN __pragma(float_control(precise, off, push))
#define LUAU_FASTMATH_END __pragma(float_control(pop))
#else
#define LUAU_FASTMATH_BEGIN
#define LUAU_FASTMATH_END
#endif

#if (defined(__x86_64__) || defined(_M_X64)) && !defined(__SSE4_1__) && !defined(__AVX__)
#if defined(_MSC_VER) && !defined(__clang__)
#define LUAU_TARGET_SSE41
#elif defined(__GNUC__) && defined(__has_attribute)
#if __has_attribute(target)
#define LUAU_TARGET_SSE41 __attribute__((target("sse4.1")))
#endif
#endif
#endif

#if defined(__GNUC__)
#define LUA_PRINTF_ATTR(fmt, arg) __attribute__((format(printf, fmt, arg)))
#else
#define LUA_PRINTF_ATTR(fmt, arg)
#endif

#ifdef _MSC_VER
#define LUA_NORETURN __declspec(noreturn)
#else
#define LUA_NORETURN __attribute__((__noreturn__))
#endif

#ifndef LUA_API
#define LUA_API extern
#endif

#define LUALIB_API LUA_API

#if defined(__GNUC__)
#define LUAI_FUNC __attribute__((visibility("hidden"))) extern
#define LUAI_DATA LUAI_FUNC
#else
#define LUAI_FUNC extern
#define LUAI_DATA extern
#endif

#ifndef LUA_USE_LONGJMP
#define LUA_USE_LONGJMP 0
#endif

#ifndef LUA_IDSIZE
#define LUA_IDSIZE 256
#endif

#ifndef LUA_MINSTACK
#define LUA_MINSTACK 20
#endif

#ifndef LUAI_MAXCSTACK
#define LUAI_MAXCSTACK 8000
#endif

#ifndef LUAI_MAXCALLS
#define LUAI_MAXCALLS 20000
#endif

#ifndef LUAI_MAXCCALLS
#define LUAI_MAXCCALLS 200
#endif

#ifndef LUA_BUFFERSIZE
#define LUA_BUFFERSIZE 512
#endif

#ifndef LUA_UTAG_LIMIT
#define LUA_UTAG_LIMIT 128
#endif

#ifndef LUA_SIZECLASSES
#define LUA_SIZECLASSES 32
#endif

#ifndef LUA_MEMORY_CATEGORIES
#define LUA_MEMORY_CATEGORIES 256
#endif

#ifndef LUA_MINSTRTABSIZE
#define LUA_MINSTRTABSIZE 32
#endif

#ifndef LUA_MAXCAPTURES
#define LUA_MAXCAPTURES 32
#endif

#ifndef LUA_CUSTOM_EXECUTION
#define LUA_CUSTOM_EXECUTION 0
#endif

#define LUAI_USER_ALIGNMENT_T \
    union \
    { \
        double u; \
        void* s; \
        long l; \
    }

#ifndef LUA_VECTOR_SIZE
#define LUA_VECTOR_SIZE 3 
#endif

#define LUA_EXTRA_SIZE (LUA_VECTOR_SIZE - 2)


static int aslr(DWORD address)
{
    return address - 0x400000 + reinterpret_cast<DWORD>(GetModuleHandleA(NULL));
}


#define shuffle3(a1, a2, a3) a3; a1; a2; //01.06.2023
#define shuffle4(a1, a2, a3, a4) a1; a3; a2; a4; //01.06.2023
#define shuffle5(a1, a2, a3, a4, a5) a5; a4; a1; a3; a2; //01.06.2023
#define shuffle6(a1, a2, a3, a4, a5, a6) a2; a6; a4; a1; a5; a3; //01.06.2023
#define shuffle8(a1, a2, a3, a4, a5, a6, a7, a8) a5; a4; a8; a3; a2; a1; a7; a6; //01.06.2023
#define shuffle9(a1, a2, a3, a4, a5, a6, a7, a8, a9) a7; a4; a6; a9; a1; a8; a2; a5; a3; //01.06.2023


template <typename T> struct vmvalue1
{
public:
    operator const T() const
    {
        return (T)((uintptr_t)storage - (uintptr_t)this);
    }

    void operator=(const T& value)
    {
        storage = (T)((uintptr_t)value + (uintptr_t)this);
    }

    const T operator->() const
    {
        return operator const T();
    }
private:
    T storage;
};


template <typename T> struct vmvalue2
{
public:
    operator const T() const
    {
        return (T)((uintptr_t)this - (uintptr_t)storage);
    }

    void operator=(const T& value)
    {
        storage = (T)((uintptr_t)this - (uintptr_t)value);
    }

    const T operator->() const
    {
        return operator const T();
    }
private:
    T storage;
};


template <typename T> struct vmvalue3
{
public:
    operator const T() const
    {
        return (T)((uintptr_t)this ^ (uintptr_t)storage);
    }

    void operator=(const T& value)
    {
        storage = (T)((uintptr_t)value ^ (uintptr_t)this);
    }

    const T operator->() const
    {
        return operator const T();
    }
private:
    T storage;
};


template <typename T> struct vmvalue4
{
public:
    operator const T() const
    {
        return (T)((uintptr_t)this + (uintptr_t)storage);
    }

    void operator=(const T& value)
    {
        storage = (T)((uintptr_t)value - (uintptr_t)this);
    }

    const T operator->() const
    {
        return operator const T();
    }
private:
    T storage;
}; 


static uintptr_t _dummynode = aslr(0x2B629B8); //01.06.2023
static uintptr_t _luau_execute = aslr(0x18C0A30); //01.06.2023
static uintptr_t _nilobject = aslr(0x2B629D8); //01.06.2023
static uintptr_t _getscheduler = aslr(0xB880A0); //01.06.2023
static uintptr_t _taskdefer = aslr(0x873550); //01.06.2023
static uintptr_t _pushinstance = aslr(0x7A2B40); //01.06.2023
static uintptr_t _impersonator = aslr(0x198B7E0); //01.06.2023
static uintptr_t _scriptcontextresume = aslr(0x873CB0); //01.06.2023
static uintptr_t _luavmload = aslr(0x935040); //01.06.2023
static uintptr_t _print = aslr(0xF0A580); //01.06.2023
static uintptr_t _pseudo2 = aslr(0x186CA30); //01.06.2023